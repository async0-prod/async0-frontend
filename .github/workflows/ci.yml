name: async0 CI

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  setup:
    name: Detect code changes
    runs-on: ubuntu-latest
    outputs:
      user_changed: ${{ steps.set_flags.outputs.user_changed }}
      admin_changed: ${{ steps.set_flags.outputs.admin_changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed_files
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # For PRs, compare against the base branch
            files=$(git diff --name-only ${{ github.event.pull_request.base.sha }}...${{ github.sha }})
          else
            # For pushes to main, compare against previous commit
            files=$(git diff --name-only HEAD~1..HEAD)
          fi
          echo "Changed files:"
          echo "$files"
          echo "files<<EOF" >> $GITHUB_OUTPUT
          echo "$files" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Set build flags
        id: set_flags
        run: |
          files="${{ steps.changed_files.outputs.files }}"
          user_changed=false
          admin_changed=false

          if echo "$files" | grep -qE '^apps/user/|^packages/' || true; then
            user_changed=true
          fi

          if echo "$files" | grep -qE '^apps/admin/|^packages/' || true; then
            admin_changed=true
          fi

          root_changes=$(echo "$files" | grep -vE '^apps/|^packages/' || true)
          if [ -n "$root_changes" ]; then
            echo "Root-level changes detected, building all apps"
            user_changed=true
            admin_changed=true
          fi

          echo "user_changed=$user_changed" >> $GITHUB_OUTPUT
          echo "admin_changed=$admin_changed" >> $GITHUB_OUTPUT

  build-user-and-push-image:
    if: needs.setup.outputs.user_changed == 'true'
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image to dockerhub
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./apps/user/Dockerfile.user
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/async0:user-latest
            ${{ secrets.DOCKER_USERNAME }}/async0:user-${{ github.sha }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          sbom: true

  build-admin-and-push-image:
    if: needs.setup.outputs.admin_changed == 'true'
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image to dockerhub
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./apps/admin/Dockerfile.admin
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/async0:admin-latest
            ${{ secrets.DOCKER_USERNAME }}/async0:admin-${{ github.sha }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          sbom: true
