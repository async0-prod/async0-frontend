"""vote schema changes

Revision ID: c7e3bbe99c18
Revises: c8a9b61893e3
Create Date: 2025-04-13 09:49:50.667214

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'c7e3bbe99c18'
down_revision: Union[str, None] = 'c8a9b61893e3'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('vote_problem',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('vote_type', sa.Enum('UPVOTE', 'DOWNVOTE', name='votetype'), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('problem_id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['problem_id'], ['problem.id'], name=op.f('fk_vote_problem_problem_id_problem'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk_vote_problem_user_id_user'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_vote_problem')),
    sa.UniqueConstraint('user_id', 'problem_id', name=op.f('uq_vote_problem_user_id'))
    )
    with op.batch_alter_table('vote_problem', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_vote_problem_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_vote_problem_updated_at'), ['updated_at'], unique=False)

    op.create_table('vote_solution',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('vote_type', sa.Enum('UPVOTE', 'DOWNVOTE', name='votetype'), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('problem_id', sa.Uuid(), nullable=False),
    sa.Column('solution_id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['problem_id'], ['problem.id'], name=op.f('fk_vote_solution_problem_id_problem'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['solution_id'], ['solution.id'], name=op.f('fk_vote_solution_solution_id_solution'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk_vote_solution_user_id_user'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_vote_solution')),
    sa.UniqueConstraint('user_id', 'solution_id', name=op.f('uq_vote_solution_user_id'))
    )
    with op.batch_alter_table('vote_solution', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_vote_solution_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_vote_solution_updated_at'), ['updated_at'], unique=False)

    with op.batch_alter_table('upvote_solution', schema=None) as batch_op:
        batch_op.drop_index('ix_upvote_solution_created_at')
        batch_op.drop_index('ix_upvote_solution_updated_at')

    op.drop_table('upvote_solution')
    with op.batch_alter_table('downvote_solution', schema=None) as batch_op:
        batch_op.drop_index('ix_downvote_solution_created_at')
        batch_op.drop_index('ix_downvote_solution_updated_at')

    op.drop_table('downvote_solution')
    with op.batch_alter_table('problem', schema=None) as batch_op:
        batch_op.alter_column('name',
               existing_type=sa.VARCHAR(length=64),
               type_=sa.String(length=128),
               existing_nullable=False)

    with op.batch_alter_table('topic', schema=None) as batch_op:
        batch_op.add_column(sa.Column('list_id', sa.Uuid(), nullable=False))
        batch_op.create_foreign_key(batch_op.f('fk_topic_list_id_list'), 'list', ['list_id'], ['id'], ondelete='CASCADE')

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('topic', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('fk_topic_list_id_list'), type_='foreignkey')
        batch_op.drop_column('list_id')

    with op.batch_alter_table('problem', schema=None) as batch_op:
        batch_op.alter_column('name',
               existing_type=sa.String(length=128),
               type_=sa.VARCHAR(length=64),
               existing_nullable=False)

    op.create_table('downvote_solution',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('problem_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('solution_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['problem_id'], ['problem.id'], name='fk_downvote_solution_problem_id_problem', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['solution_id'], ['solution.id'], name='fk_downvote_solution_solution_id_solution', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='fk_downvote_solution_user_id_user', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='pk_downvote_solution'),
    sa.UniqueConstraint('user_id', 'solution_id', name='uq_downvote_solution_user_id')
    )
    with op.batch_alter_table('downvote_solution', schema=None) as batch_op:
        batch_op.create_index('ix_downvote_solution_updated_at', ['updated_at'], unique=False)
        batch_op.create_index('ix_downvote_solution_created_at', ['created_at'], unique=False)

    op.create_table('upvote_solution',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('problem_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('solution_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['problem_id'], ['problem.id'], name='fk_upvote_solution_problem_id_problem', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['solution_id'], ['solution.id'], name='fk_upvote_solution_solution_id_solution', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='fk_upvote_solution_user_id_user', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='pk_upvote_solution'),
    sa.UniqueConstraint('user_id', 'problem_id', name='uq_upvote_solution_user_id')
    )
    with op.batch_alter_table('upvote_solution', schema=None) as batch_op:
        batch_op.create_index('ix_upvote_solution_updated_at', ['updated_at'], unique=False)
        batch_op.create_index('ix_upvote_solution_created_at', ['created_at'], unique=False)

    with op.batch_alter_table('vote_solution', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_vote_solution_updated_at'))
        batch_op.drop_index(batch_op.f('ix_vote_solution_created_at'))

    op.drop_table('vote_solution')
    with op.batch_alter_table('vote_problem', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_vote_problem_updated_at'))
        batch_op.drop_index(batch_op.f('ix_vote_problem_created_at'))

    op.drop_table('vote_problem')
    # ### end Alembic commands ###
