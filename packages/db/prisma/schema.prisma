generator client {
  provider        = "prisma-client-js"
  output          = "../generated/prisma"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model alembic_version {
  version_num String @id(map: "alembic_version_pkc") @db.VarChar(32)
}

model bookmark {
  id         String   @id(map: "pk_bookmark") @db.Uuid
  user_id    String   @db.Uuid
  problem_id String   @db.Uuid
  created_at DateTime @db.Timestamptz(6)
  updated_at DateTime @db.Timestamptz(6)
  problem    problem  @relation(fields: [problem_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_bookmark_problem_id_problem")
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_bookmark_user_id_user")

  @@unique([user_id, problem_id], map: "uq_bookmark_user_id")
  @@index([created_at], map: "ix_bookmark_created_at")
  @@index([updated_at], map: "ix_bookmark_updated_at")
}

model list {
  id           String         @id(map: "pk_list") @db.Uuid
  name         String         @db.VarChar(16)
  list_problem list_problem[]
  topic        topic[]
}

model list_problem {
  list_id    String  @db.Uuid
  problem_id String  @db.Uuid
  list       list    @relation(fields: [list_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_list_problem_list_id_list")
  problem    problem @relation(fields: [problem_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_list_problem_problem_id_problem")

  @@id([list_id, problem_id], map: "pk_list_problem")
}

model problem {
  id            String          @id(map: "pk_problem") @db.Uuid
  name          String          @unique(map: "ix_problem_name") @db.VarChar(128)
  description   String          @db.VarChar
  difficulty    difficulty
  starter_code  String          @db.VarChar
  link          String?         @db.VarChar
  time_limit    Int?
  memory_limit  Int?
  created_at    DateTime        @db.Timestamptz(6)
  updated_at    DateTime        @db.Timestamptz(6)
  rank          Int?
  bookmark      bookmark[]
  list_problem  list_problem[]
  solution      solution[]
  submission    submission[]
  testcase      testcase[]
  topic_problem topic_problem[]
  user_solution user_solution[]
  vote_problem  vote_problem[]
  vote_solution vote_solution[]

  @@index([created_at], map: "ix_problem_created_at")
  @@index([updated_at], map: "ix_problem_updated_at")
}

model solution {
  id            String          @id(map: "pk_solution") @db.Uuid
  code          String          @db.VarChar
  rank          Int
  problem_id    String          @db.Uuid
  created_at    DateTime        @db.Timestamptz(6)
  updated_at    DateTime        @db.Timestamptz(6)
  problem       problem         @relation(fields: [problem_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_solution_problem_id_problem")
  vote_solution vote_solution[]

  @@index([created_at], map: "ix_solution_created_at")
  @@index([updated_at], map: "ix_solution_updated_at")
}

model submission {
  id               String        @id(map: "pk_submission") @db.Uuid
  status           status
  user_id          String        @db.Uuid
  problem_id       String        @db.Uuid
  user_solution_id String        @db.Uuid
  passed_testcases Int
  total_testcases  Int
  created_at       DateTime      @db.Timestamptz(6)
  updated_at       DateTime      @db.Timestamptz(6)
  problem          problem       @relation(fields: [problem_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_submission_problem_id_problem")
  user             user          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_submission_user_id_user")
  user_solution    user_solution @relation(fields: [user_solution_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_submission_user_solution_id_user_solution")

  @@index([created_at], map: "ix_submission_created_at")
  @@index([updated_at], map: "ix_submission_updated_at")
}

model testcase {
  id         String   @id(map: "pk_testcase") @db.Uuid
  problem_id String   @db.Uuid
  input      String   @db.VarChar
  output     String   @db.VarChar
  created_at DateTime @db.Timestamptz(6)
  updated_at DateTime @db.Timestamptz(6)
  problem    problem  @relation(fields: [problem_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_testcase_problem_id_problem")

  @@index([created_at], map: "ix_testcase_created_at")
  @@index([updated_at], map: "ix_testcase_updated_at")
}

model topic {
  id            String          @id(map: "pk_topic") @db.Uuid
  name          String          @db.VarChar
  list_id       String          @db.Uuid
  created_at    DateTime        @db.Timestamptz(6)
  updated_at    DateTime        @db.Timestamptz(6)
  list          list            @relation(fields: [list_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_topic_list_id_list")
  topic_problem topic_problem[]

  @@index([created_at], map: "ix_topic_created_at")
  @@index([updated_at], map: "ix_topic_updated_at")
}

model topic_problem {
  topic_id   String  @db.Uuid
  problem_id String  @db.Uuid
  problem    problem @relation(fields: [problem_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_topic_problem_problem_id_problem")
  topic      topic   @relation(fields: [topic_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_topic_problem_topic_id_topic")

  @@id([topic_id, problem_id], map: "pk_topic_problem")
}

model user {
  id            String          @id(map: "pk_user") @db.Uuid
  email         String          @unique(map: "uq_user_email") @db.VarChar(64)
  role          userroles
  created_at    DateTime        @db.Timestamptz(6)
  updated_at    DateTime        @db.Timestamptz(6)
  bookmark      bookmark[]
  submission    submission[]
  user_solution user_solution[]
  vote_problem  vote_problem[]
  vote_solution vote_solution[]

  @@index([created_at], map: "ix_user_created_at")
  @@index([updated_at], map: "ix_user_updated_at")
}

model user_solution {
  id         String       @id(map: "pk_user_solution") @db.Uuid
  code       String       @db.VarChar
  has_solved Boolean
  user_id    String       @db.Uuid
  problem_id String       @db.Uuid
  created_at DateTime     @db.Timestamptz(6)
  updated_at DateTime     @db.Timestamptz(6)
  submission submission[]
  problem    problem      @relation(fields: [problem_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_solution_problem_id_problem")
  user       user         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_solution_user_id_user")

  @@index([created_at], map: "ix_user_solution_created_at")
  @@index([updated_at], map: "ix_user_solution_updated_at")
}

model vote_problem {
  id         String   @id(map: "pk_vote_problem") @db.Uuid
  vote_type  votetype
  user_id    String   @db.Uuid
  problem_id String   @db.Uuid
  created_at DateTime @db.Timestamptz(6)
  updated_at DateTime @db.Timestamptz(6)
  problem    problem  @relation(fields: [problem_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_vote_problem_problem_id_problem")
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_vote_problem_user_id_user")

  @@unique([user_id, problem_id], map: "uq_vote_problem_user_id")
  @@index([created_at], map: "ix_vote_problem_created_at")
  @@index([updated_at], map: "ix_vote_problem_updated_at")
}

model vote_solution {
  id          String   @id(map: "pk_vote_solution") @db.Uuid
  vote_type   votetype
  user_id     String   @db.Uuid
  problem_id  String   @db.Uuid
  solution_id String   @db.Uuid
  created_at  DateTime @db.Timestamptz(6)
  updated_at  DateTime @db.Timestamptz(6)
  problem     problem  @relation(fields: [problem_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_vote_solution_problem_id_problem")
  solution    solution @relation(fields: [solution_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_vote_solution_solution_id_solution")
  user        user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_vote_solution_user_id_user")

  @@unique([user_id, solution_id], map: "uq_vote_solution_user_id")
  @@index([created_at], map: "ix_vote_solution_created_at")
  @@index([updated_at], map: "ix_vote_solution_updated_at")
}

enum difficulty {
  Easy
  Medium
  Hard
  NA
}

enum status {
  Accepted
  Rejected
  Pending
  TimeLimit
}

enum userroles {
  USER
  ADMIN
}

enum votetype {
  UPVOTE
  DOWNVOTE
}
